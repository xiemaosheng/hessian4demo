########################################### log ###############################################################
log4j.level=${log4j.level}

########################################### uc ###############################################################
waf.uc.uri=${waf.uc.uri}
waf.uc.username=${waf.uc.username}
waf.uc.password=${waf.uc.password}
waf.vorg=${waf.vorg}
waf.guest.enabled=${waf.guest.enabled}
waf.uc.vorg.macToken=${waf.uc.vorg.macToken}

########################################### druid ###############################################################
druid.driverClassName=${druid.driverClassName}
#配置初始化大小、最小、最大
druid.initialSize=${druid.initialSize}
druid.minIdle=${druid.minIdle}
druid.maxActive=${druid.maxActive}
#配置获取连接等待超时的时间
druid.maxWait=${druid.maxWait}
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
druid.timeBetweenEvictionRunsMillis=${druid.timeBetweenEvictionRunsMillis}
#配置一个连接在池中最小生存的时间，单位是毫秒
druid.minEvictableIdleTimeMillis=${druid.minEvictableIdleTimeMillis}
druid.validationQuery=${druid.validationQuery}
druid.testWhileIdle=${druid.testWhileIdle}
druid.testOnBorrow=${druid.testOnBorrow}
druid.testOnReturn=${druid.testOnReturn}
#打开PSCache，并且指定每个连接上PSCache的大小
druid.poolPreparedStatements=${druid.poolPreparedStatements}
druid.maxPoolPreparedStatementPerConnectionSize=${druid.maxPoolPreparedStatementPerConnectionSize}
#配置监控统计拦截的filters
druid.filters=${druid.filters}
druid.url=${druid.url}

druid.user=${druid.user}
druid.password=${druid.password}

########################################### MongoDB configuration ###############################################################
mongo.host=${mongo.host}


########################################### Redis configuration ###############################################################
#控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，
redis.pool.maxActive=${redis.pool.maxActive}
#最大空闲连接数
redis.pool.maxIdle=${redis.pool.maxIdle}
#最小空闲连接数
redis.pool.minIdle=${redis.pool.minIdle}
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
redis.pool.maxWaitMillis=${redis.pool.maxWaitMillis}
#在获取连接的时候检查有效性, 默认false
redis.pool.testOnBorrow=${redis.pool.testOnBorrow}
#在return给pool时，是否提前进行validate操作；
redis.pool.testOnReturn=${redis.pool.testOnReturn}
#连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true
redis.pool.blockWhenExhausted=${redis.pool.blockWhenExhausted}
#设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)
redis.pool.evictionPolicyClassName=${redis.pool.evictionPolicyClassName}
#是否启用后进先出, 默认true
redis.pool.lifo=${redis.pool.lifo}
#每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3
redis.pool.numTestsPerEvictionRun=${redis.pool.numTestsPerEvictionRun}
#一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；
redis.pool.minEvictableIdleTimeMillis=${redis.pool.minEvictableIdleTimeMillis}
#逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
redis.pool.timeBetweenEvictionRunsMillis=${redis.pool.timeBetweenEvictionRunsMillis}
#在空闲时检查有效性, 默认false
redis.pool.testWhileIdle=${redis.pool.testWhileIdle}
#host
redis.host=${redis.host}
#port
redis.port=${redis.port}
#timeout
redis.timeout=${redis.timeout}
#namespace
redis.namespace=${redis.namespace}
#database
redis.database=${redis.database}
#password
redis.password=${redis.password}
